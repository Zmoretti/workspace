package FlashCard;

public class Main {
    public static void main(String[] args) {
        TerminologyBank terminologyBank = new TerminologyBank();
        // Add sample terminology
        terminologyBank.addTerminology(new Terminology("Polymorphism", "The ability of an object to take on many forms.", "1"));
        terminologyBank.addTerminology(new Terminology("Inheritance", "The mechanism in Java by which one class is allowed to inherit the features (fields and methods) of another class.", "1"));
        terminologyBank.addTerminology(new Terminology("Casting", "allows us to convert one data type into another", "1"));
        terminologyBank.addTerminology(new Terminology("widening","Automatic Conversion, No Data Loss, Implicit Conversion - programmers don't need to perform explicit casting, making the code cleaner and less prone to errors","1"));
        terminologyBank.addTerminology(new Terminology("narrowing","Control and Precision,Memory Efficiency,Specificity","1"));
        terminologyBank.addTerminology(new Terminology("truncation"," refers to the process of shortening or cutting off the precision or length of a value","1"));
        terminologyBank.addTerminology(new Terminology("primitive data types","Java has eight primitive data types, which are the building blocks of data manipulation","1"));
        terminologyBank.addTerminology(new Terminology("Java Virtual Machine (JVM)","It converts Java bytecode into machine language","1"));
        terminologyBank.addTerminology(new Terminology("Java Runtime Environment (JRE)","software layer that runs on top of a computer's operating system software and provides the class libraries and other resources that a specific Java program needs to run","1"));
        terminologyBank.addTerminology(new Terminology("Java Development Kit (JDK)","The Java Development Kit is a distribution of Java technology by Oracle Corporation. It implements the Java Language Specification and the Java Virtual Machine Specification and provides the Standard Edition of the Java Application Programming Interface","1"));
        terminologyBank.addTerminology(new Terminology("bytecode","When you compile a Java program, the Java compiler converts your code into bytecode","1"));
        terminologyBank.addTerminology(new Terminology("machine code","the elemental language of computers composed of 0s and 1s in long sequences that are executable only by the CPU","1"));
        terminologyBank.addTerminology(new Terminology("String","an object that represents a number of character values","1"));
        terminologyBank.addTerminology(new Terminology("Boolean Expression","a Java expression that, when evaluated, returns a Boolean value: true or false","1"));
        terminologyBank.addTerminology(new Terminology("Ternary Operator","The ternary operator in Java is a conditional operator that allows you to choose between two values based on a condition","1"));
        terminologyBank.addTerminology(new Terminology("state","Car object that is turned on will behave differently than a Car object that is turned off","1"));
        terminologyBank.addTerminology(new Terminology("behavior","refers to the actions that an object can perform","1"));
        terminologyBank.addTerminology(new Terminology("expression","a combination of variables, operators and method invocations that evaluate to a single value","1"));
        terminologyBank.addTerminology(new Terminology("statement","instructions that tell the programming language what to do","1"));
        terminologyBank.addTerminology(new Terminology("method","a set of instructions that can be called for execution using the method name","1"));
        terminologyBank.addTerminology(new Terminology("reusable","code that can be used again in different parts of a program or different programs","1"));
        terminologyBank.addTerminology(new Terminology("method signature","the combination of the method name and the parameter list","1"));
        terminologyBank.addTerminology(new Terminology("block","a set of statements enclosed in set braces { }","1"));
        terminologyBank.addTerminology(new Terminology("Assertion Error","a subclass of the Error class and it is thrown when an assertion fails","1"));
        terminologyBank.addTerminology(new Terminology("comparison operators","used to compare two values (or variables)","1"));
        terminologyBank.addTerminology(new Terminology("logical operators","AND (&&): : Returns true if both operands are true.\n" +
                "OR (||): : Returns true if either operand is true.\n" +
                "NOT (!): : Returns true if the operand is false.","1"));
//        terminologyBank.addTerminology(new Terminology("overflow"));
//        terminologyBank.addTerminology(new Terminology("conditional statement / if-else"));
//        terminologyBank.addTerminology(new Terminology("static initialization"));
//        terminologyBank.addTerminology(new Terminology("array"));
//        terminologyBank.addTerminology(new Terminology("loop"));
//        terminologyBank.addTerminology(new Terminology("index"));
//        terminologyBank.addTerminology(new Terminology("scope"));
//        terminologyBank.addTerminology(new Terminology("implied block"));
//        terminologyBank.addTerminology(new Terminology("array.length"));
//        terminologyBank.addTerminology(new Terminology("element"));
//        terminologyBank.addTerminology(new Terminology("for loop"));
//        terminologyBank.addTerminology(new Terminology("while loop"));
//        terminologyBank.addTerminology(new Terminology("doâ€¦while loop"));
//        terminologyBank.addTerminology(new Terminology("break"));
//        terminologyBank.addTerminology(new Terminology("continue"));
//        terminologyBank.addTerminology(new Terminology("nested loop"));
//        terminologyBank.addTerminology(new Terminology("block scope"));
//        terminologyBank.addTerminology(new Terminology("Scanner"));
//        terminologyBank.addTerminology(new Terminology("parse"));
//        terminologyBank.addTerminology(new Terminology("System.in / System.out"));
//        terminologyBank.addTerminology(new Terminology("stream"));
//        terminologyBank.addTerminology(new Terminology("print formatted"));
//        terminologyBank.addTerminology(new Terminology("string split"));
//        terminologyBank.addTerminology(new Terminology("wrapper class"));
//        terminologyBank.addTerminology(new Terminology("stack (memory)"));
//        terminologyBank.addTerminology(new Terminology("heap"));
//        terminologyBank.addTerminology(new Terminology("null"));
//        terminologyBank.addTerminology(new Terminology("reference type"));
//        terminologyBank.addTerminology(new Terminology("object"));
//        terminologyBank.addTerminology(new Terminology("class"));
//        terminologyBank.addTerminology(new Terminology("immutable"));
//        terminologyBank.addTerminology(new Terminology("String.substring()"));
//        terminologyBank.addTerminology(new Terminology("abstraction"));
//        terminologyBank.addTerminology(new Terminology("NullPointerException"));
//        terminologyBank.addTerminology(new Terminology("reference equality (==) "));
//        terminologyBank.addTerminology(new Terminology("value equality (.equals())"));
//        terminologyBank.addTerminology(new Terminology("static method"));
//        terminologyBank.addTerminology(new Terminology("memory address"));
//        terminologyBank.addTerminology(new Terminology("pointer"));
//        terminologyBank.addTerminology(new Terminology("instantiated"));
//        terminologyBank.addTerminology(new Terminology("initialize"));
//        terminologyBank.addTerminology(new Terminology("concatenation"));
//        terminologyBank.addTerminology(new Terminology("for each loop"));
//        terminologyBank.addTerminology(new Terminology("import "));
//        terminologyBank.addTerminology(new Terminology("package"));
//        terminologyBank.addTerminology(new Terminology("boxing"));
//        terminologyBank.addTerminology(new Terminology("unboxing"));
//        terminologyBank.addTerminology(new Terminology("autoboxing"));
//        terminologyBank.addTerminology(new Terminology("ArrayList"));
//        terminologyBank.addTerminology(new Terminology("List"));
//        terminologyBank.addTerminology(new Terminology("Interface"));
//        terminologyBank.addTerminology(new Terminology("Collection"));
//        terminologyBank.addTerminology(new Terminology("implementation class"));
//        terminologyBank.addTerminology(new Terminology("data structure"));
//        terminologyBank.addTerminology(new Terminology("BigDecimal"));
//        terminologyBank.addTerminology(new Terminology("double rounding error"));
//        terminologyBank.addTerminology(new Terminology("namespace"));
//        terminologyBank.addTerminology(new Terminology("Set"));
//        terminologyBank.addTerminology(new Terminology("Stack"));
//        terminologyBank.addTerminology(new Terminology("Map"));
//        terminologyBank.addTerminology(new Terminology("Queue"));
//        terminologyBank.addTerminology(new Terminology("HashMap"));
//        terminologyBank.addTerminology(new Terminology("TreeMap"));
//        terminologyBank.addTerminology(new Terminology("LinkedHashMap"));
//        terminologyBank.addTerminology(new Terminology("HashSet"));
//        terminologyBank.addTerminology(new Terminology("LinkedHashSet"));
//        terminologyBank.addTerminology(new Terminology("Natural Order"));
//        terminologyBank.addTerminology(new Terminology("Encapsulation"));
//        terminologyBank.addTerminology(new Terminology("alphanumeric order"));
//        terminologyBank.addTerminology(new Terminology("Getters and Setters"));
//        terminologyBank.addTerminology(new Terminology("loosely coupled"));
//        terminologyBank.addTerminology(new Terminology("void"));
//        terminologyBank.addTerminology(new Terminology("constructor"));
//        terminologyBank.addTerminology(new Terminology("static"));
//        terminologyBank.addTerminology(new Terminology("public "));
//        terminologyBank.addTerminology(new Terminology("private"));
//        terminologyBank.addTerminology(new Terminology("this"));
//        terminologyBank.addTerminology(new Terminology("derived property"));
//        terminologyBank.addTerminology(new Terminology("key/value pair"));
//        terminologyBank.addTerminology(new Terminology("Overloading"));
//        terminologyBank.addTerminology(new Terminology("superclass"));
//        terminologyBank.addTerminology(new Terminology("subclass"));
//        terminologyBank.addTerminology(new Terminology("upcasting"));
//        terminologyBank.addTerminology(new Terminology("down Casting"));
//        terminologyBank.addTerminology(new Terminology("Overriding"));
//        terminologyBank.addTerminology(new Terminology("super"));
//        terminologyBank.addTerminology(new Terminology("extends"));
//        terminologyBank.addTerminology(new Terminology("is-a relationship"));
//        terminologyBank.addTerminology(new Terminology("Object"));
//        terminologyBank.addTerminology(new Terminology("implements"));
//        terminologyBank.addTerminology(new Terminology("has-a relationship"));
//        terminologyBank.addTerminology(new Terminology("object context"));
//        terminologyBank.addTerminology(new Terminology("abstract class"));
//        terminologyBank.addTerminology(new Terminology("default"));
//        terminologyBank.addTerminology(new Terminology("SDLC (Software Development Lifecycle)"));
//        terminologyBank.addTerminology(new Terminology("final"));
//        terminologyBank.addTerminology(new Terminology("agile"));
//        terminologyBank.addTerminology(new Terminology("waterfall"));
//        terminologyBank.addTerminology(new Terminology("protected"));
//        terminologyBank.addTerminology(new Terminology("static method"));
//        terminologyBank.addTerminology(new Terminology("instanceof"));
//        terminologyBank.addTerminology(new Terminology("unit testing"));
//        terminologyBank.addTerminology(new Terminology("units"));
//        terminologyBank.addTerminology(new Terminology("QA (Quality Assurance)"));
//        terminologyBank.addTerminology(new Terminology("QC (Quality Control)"));
//        terminologyBank.addTerminology(new Terminology("regression testing"));
//        terminologyBank.addTerminology(new Terminology("exploratory testing"));
//        terminologyBank.addTerminology(new Terminology("stress testing"));
//        terminologyBank.addTerminology(new Terminology("abstract method"));
//        terminologyBank.addTerminology(new Terminology("transitivity"));
//        terminologyBank.addTerminology(new Terminology("alpha testing"));
//        terminologyBank.addTerminology(new Terminology("beta testing"));
//        terminologyBank.addTerminology(new Terminology("concrete method"));
//        terminologyBank.addTerminology(new Terminology("Junit"));
//        terminologyBank.addTerminology(new Terminology("syntax"));
//        terminologyBank.addTerminology(new Terminology("tdd (Test Driven Development)"));
//        terminologyBank.addTerminology(new Terminology("abstract vs interface vs superclass"));
//        terminologyBank.addTerminology(new Terminology("assert"));
//        terminologyBank.addTerminology(new Terminology("@Before"));
//        terminologyBank.addTerminology(new Terminology("@Test"));
//        terminologyBank.addTerminology(new Terminology("@After"));
//        terminologyBank.addTerminology(new Terminology("delta"));
//        terminologyBank.addTerminology(new Terminology("framework"));
//        terminologyBank.addTerminology(new Terminology("AssertEquals"));
//        terminologyBank.addTerminology(new Terminology("annotation"));
//        terminologyBank.addTerminology(new Terminology("AssertTrue / AssertFalse"));
//        terminologyBank.addTerminology(new Terminology("Arrange Act Assert"));
//        terminologyBank.addTerminology(new Terminology("exception"));
//        terminologyBank.addTerminology(new Terminology("runtime error"));
//        terminologyBank.addTerminology(new Terminology("compile error"));
//        terminologyBank.addTerminology(new Terminology("Error"));
//        terminologyBank.addTerminology(new Terminology("exception class"));
//        terminologyBank.addTerminology(new Terminology("Checked Exception"));
//        terminologyBank.addTerminology(new Terminology("try..catch"));
//        terminologyBank.addTerminology(new Terminology("Exception.getMessage()"));
//        terminologyBank.addTerminology(new Terminology("throws"));
//        terminologyBank.addTerminology(new Terminology("throw"));
//        terminologyBank.addTerminology(new Terminology("stack trace"));
//        terminologyBank.addTerminology(new Terminology("thrown"));
//        terminologyBank.addTerminology(new Terminology("handled"));
//        terminologyBank.addTerminology(new Terminology("propagation"));
//        terminologyBank.addTerminology(new Terminology("finally"));
//        terminologyBank.addTerminology(new Terminology("bury an exception"));
//        terminologyBank.addTerminology(new Terminology("PrintWriter"));
//        terminologyBank.addTerminology(new Terminology("Buffered Writer"));
//        terminologyBank.addTerminology(new Terminology("Buffer"));
//        terminologyBank.addTerminology(new Terminology("try-with-resource"));
//        terminologyBank.addTerminology(new Terminology("File Mode"));
//        terminologyBank.addTerminology(new Terminology("file permission"));
//        terminologyBank.addTerminology(new Terminology("flush"));

        //Terminology for chapter 2
        //
        //
        //

        terminologyBank.addTerminology(new Terminology("SELECT", "retrieves records from a database table", "2"));
        terminologyBank.addTerminology(new Terminology("Relational Database", "organizes data into rows and columns, which collectively form a table", "2"));
        terminologyBank.addTerminology(new Terminology("(R)DBMS  (Relational Database Management System)", "a program that stores, manages, and retrieves data from a relational database", "2"));
        terminologyBank.addTerminology(new Terminology("FROM", "a reserved word that specifies the tables or queries that contain data for a SELECT clause", "2"));
        terminologyBank.addTerminology(new Terminology("AND / OR", "the AND operator displays a record if all conditions are TRUE, while the OR operator displays a record if any conditions are TRUE", "2"));
//        terminologyBank.addTerminology(new Terminology("Non-relational database  (NoSQL)"));
//        terminologyBank.addTerminology(new Terminology("SQL"));
//        terminologyBank.addTerminology(new Terminology("Declarative Language"));
//        terminologyBank.addTerminology(new Terminology("ANSI SQL"));
//        terminologyBank.addTerminology(new Terminology("LIMIT"));
//        terminologyBank.addTerminology(new Terminology("ORDER BY"));
//        terminologyBank.addTerminology(new Terminology("Ascending Order (ASC)"));
//        terminologyBank.addTerminology(new Terminology("Descending Order (DESC)"));
//        terminologyBank.addTerminology(new Terminology("WHERE"));
//        terminologyBank.addTerminology(new Terminology("DDL (Data Definition Language)"));
//        terminologyBank.addTerminology(new Terminology("DML (Data Manipulation Language)"));
//        terminologyBank.addTerminology(new Terminology("DCL (Data Control Language)"));
//        terminologyBank.addTerminology(new Terminology("BETWEEN"));
//        terminologyBank.addTerminology(new Terminology("Cell"));
//        terminologyBank.addTerminology(new Terminology("Column"));
//        terminologyBank.addTerminology(new Terminology("Row"));
//        terminologyBank.addTerminology(new Terminology("DISTINCT"));
//        terminologyBank.addTerminology(new Terminology("entity"));
//        terminologyBank.addTerminology(new Terminology("LIKE"));
//        terminologyBank.addTerminology(new Terminology("Clause"));
//        terminologyBank.addTerminology(new Terminology("ILIKE"));
//        terminologyBank.addTerminology(new Terminology("AS"));
//        terminologyBank.addTerminology(new Terminology("alias"));
//        terminologyBank.addTerminology(new Terminology("char"));
//        terminologyBank.addTerminology(new Terminology("varchar"));
//        terminologyBank.addTerminology(new Terminology("text"));
//        terminologyBank.addTerminology(new Terminology("int"));
//        terminologyBank.addTerminology(new Terminology("bigint"));
//        terminologyBank.addTerminology(new Terminology("decimal"));
//        terminologyBank.addTerminology(new Terminology("precision"));
//        terminologyBank.addTerminology(new Terminology("scale"));
//        terminologyBank.addTerminology(new Terminology("table"));
//        terminologyBank.addTerminology(new Terminology("database"));
//        terminologyBank.addTerminology(new Terminology("GROUP BY"));
//        terminologyBank.addTerminology(new Terminology("subquery"));
//        terminologyBank.addTerminology(new Terminology("aggregate function"));
//        terminologyBank.addTerminology(new Terminology("||  (in postgreSQL)"));
//        terminologyBank.addTerminology(new Terminology("offset"));
//        terminologyBank.addTerminology(new Terminology("sql data type casting"));
//        terminologyBank.addTerminology(new Terminology("COUNT()"));
//        terminologyBank.addTerminology(new Terminology("SUM()"));
//        terminologyBank.addTerminology(new Terminology("AVG()"));
//        terminologyBank.addTerminology(new Terminology("MIN()"));
//        terminologyBank.addTerminology(new Terminology("MAX()"));
//        terminologyBank.addTerminology(new Terminology("interval"));
//        terminologyBank.addTerminology(new Terminology("INNER Join"));
//        terminologyBank.addTerminology(new Terminology("OUTER Join"));
//        terminologyBank.addTerminology(new Terminology("Primary Key"));
//        terminologyBank.addTerminology(new Terminology("JOIN"));
//        terminologyBank.addTerminology(new Terminology("Foreign Key"));
//        terminologyBank.addTerminology(new Terminology("Cardinality"));
//        terminologyBank.addTerminology(new Terminology("1-to-1"));
//        terminologyBank.addTerminology(new Terminology("1-to-many"));
//        terminologyBank.addTerminology(new Terminology("many-to-many"));
//        terminologyBank.addTerminology(new Terminology("join table"));
//        terminologyBank.addTerminology(new Terminology("LEFT / RIGHT JOIN"));
//        terminologyBank.addTerminology(new Terminology("Natural Key"));
//        terminologyBank.addTerminology(new Terminology("FULL OUTER JOIN"));
//        terminologyBank.addTerminology(new Terminology("Surrogate Key"));
//        terminologyBank.addTerminology(new Terminology("Composite Primary Key"));
//        terminologyBank.addTerminology(new Terminology("UNION"));
//        terminologyBank.addTerminology(new Terminology("INSERT"));
//        terminologyBank.addTerminology(new Terminology("UPDATE"));
//        terminologyBank.addTerminology(new Terminology("DELETE"));
//        terminologyBank.addTerminology(new Terminology("Transaction"));
//        terminologyBank.addTerminology(new Terminology("COMMIT"));
//        terminologyBank.addTerminology(new Terminology("ROLLBACK"));
//        terminologyBank.addTerminology(new Terminology("The ACID test"));
//        terminologyBank.addTerminology(new Terminology("CRUD"));
//        terminologyBank.addTerminology(new Terminology("Constraint"));
//        terminologyBank.addTerminology(new Terminology("Referential Integrity"));
//        terminologyBank.addTerminology(new Terminology("Connection"));
//        terminologyBank.addTerminology(new Terminology());
//        terminologyBank.addTerminology(new Terminology());
//        terminologyBank.addTerminology(new Terminology());
//        terminologyBank.addTerminology(new Terminology());
//        terminologyBank.addTerminology(new Terminology());
//        terminologyBank.addTerminology(new Terminology());
//        terminologyBank.addTerminology(new Terminology());
//        terminologyBank.addTerminology(new Terminology());
//        terminologyBank.addTerminology(new Terminology());
//        terminologyBank.addTerminology(new Terminology());
//        terminologyBank.addTerminology(new Terminology());
//        terminologyBank.addTerminology(new Terminology());
//        terminologyBank.addTerminology(new Terminology());
//        terminologyBank.addTerminology(new Terminology());
//        terminologyBank.addTerminology(new Terminology());
//        terminologyBank.addTerminology(new Terminology());
//        terminologyBank.addTerminology(new Terminology());
//        terminologyBank.addTerminology(new Terminology());
//        terminologyBank.addTerminology(new Terminology());
//        terminologyBank.addTerminology(new Terminology());
//        terminologyBank.addTerminology(new Terminology());
//        terminologyBank.addTerminology(new Terminology());
//        terminologyBank.addTerminology(new Terminology());
//        terminologyBank.addTerminology(new Terminology());
//        terminologyBank.addTerminology(new Terminology());
//        terminologyBank.addTerminology(new Terminology());
//        terminologyBank.addTerminology(new Terminology());
//        terminologyBank.addTerminology(new Terminology());
//        terminologyBank.addTerminology(new Terminology());
//        terminologyBank.addTerminology(new Terminology());
//        terminologyBank.addTerminology(new Terminology());
//        terminologyBank.addTerminology(new Terminology());
//        terminologyBank.addTerminology(new Terminology());
//        terminologyBank.addTerminology(new Terminology());
//        terminologyBank.addTerminology(new Terminology());
//        terminologyBank.addTerminology(new Terminology());
//        terminologyBank.addTerminology(new Terminology());
//        terminologyBank.addTerminology(new Terminology());
//        terminologyBank.addTerminology(new Terminology());
//        terminologyBank.addTerminology(new Terminology());
//        terminologyBank.addTerminology(new Terminology());
//        terminologyBank.addTerminology(new Terminology());
//        terminologyBank.addTerminology(new Terminology());
//        terminologyBank.addTerminology(new Terminology());
//        terminologyBank.addTerminology(new Terminology());
//        terminologyBank.addTerminology(new Terminology());

        // Start study session
        StudySession studySession = new StudySession(terminologyBank);
        studySession.runStudySession();
    }
}